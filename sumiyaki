#!/usr/local/bin/gosh
;;
;; "Sumiyaki" is a maintenance tool for Sumibi.
;;
;;   Copyright (C) 2002,2003,2004 Kiyoka Nishiyama
;;     $Date: 2006/05/13 02:44:07 $
;;
;; This file is part of Sumibi
;;
;; Sumibi is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2, or (at your option)
;; any later version.
;; 
;; Sumibi is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;; 
;; You should have received a copy of the GNU General Public License
;; along with Sumibi; see the file COPYING.
;;
;;
(use text.parse)
(use gauche.parseopt)
(use gauche.charconv)
(use srfi-11)
(use srfi-13)
(use dbi)
(use gauche.collection)
(use sumibi.define)
(use sumibi.dbiutil)
(use sumibi.corpus)
(use sumibi.skkdict)


;; Main -------------------------------------------------------
(define (main args)

  (define docstrings
    `(
      ,(string-append "sumiyaki " sumibi-version)
      ""
      " Usage:"
      "	    sumiyaki [switches] [dictionary-file]"
      ""
      " Switches:"
      "     -h ... Display this help message."
      "     -c ... create sumibi DB"
      "     -i ... initialize sumibi dictionary with SKK-JISYO.L"
      "     -l ... load from corpus file"
      ))

  (define (display-help)
    (for-each
     (lambda (docstring)
       (print docstring))
     docstrings)
    (exit 4))

  (let* (
	 (command #f)

	 ;; Dropping the first argument.
	 (_ (cdr args))

	 ;; Checking switches.
	 (_ (parse-options
	     _
	     (
	      ("d" () (set! command 'drop))
	      ("c" () (set! command 'create))
	      ("i" () (set! command 'skk))
	      ("l" () (set! command 'load))
	      ("s" () (set! command 'show))
	      ("h" () (display-help)))))
	 (input-port #f)
	 (input-file #f))
    (if (or
	 (eq? command 'skk)
	 (eq? command 'load))
	(begin
	  (set! input-file (car _))
	  (set! input-port
		(open-input-string 
		 (port->string
		  (open-input-conversion-port
		   (open-input-file input-file :error "File open error")
		   "*JP"
		   :buffer-size (* 10 1024)))))))
	 
    ;;
    ;; Making string port from stdin/file
    ;;

    ;; for Debugging
    (when #f
	  (begin
	    (display converted-str)
	    (exit 0)))

    (let ((conn
	   (sumibi-dbi-connect
	    sumibi-sumiyakidb-host
	    sumibi-sumiyakidb-name
	    sumibi-sumiyakidb-user
	    sumibi-sumiyakidb-password)))
    
      (case command
	((drop)
	 (let* (
		(_ (sumibi-dbi-write-query conn "DROP TABLE IF EXISTS word;"))
		(_ (sumibi-dbi-write-query conn "DROP TABLE IF EXISTS bigram;"))
		(_ (sumibi-dbi-write-query conn "DROP TABLE IF EXISTS skip_bigram;"))
		(_ (sumibi-dbi-write-query conn "DROP TABLE IF EXISTS okuri;"))
		(_ (sumibi-dbi-write-query conn "DROP TABLE IF EXISTS file;")))))
	((create)
	 (let* (
		(_ (sumibi-dbi-write-query conn 
					   (string-append
					    "CREATE TABLE IF NOT EXISTS word ("
					    "id INT NOT NULL AUTO_INCREMENT,"
					    "kind CHAR(1)," 
					    "yomiank CHAR(255),"
					    "yomi CHAR(255),"
					    "okuri CHAR(1),"
					    "tango CHAR(255),"
					    "freq_base INT NOT NULL,"
					    "freq_user INT NOT NULL,"
					    "PRIMARY KEY (id),"
					    "INDEX index_tango ( tango(20) ),"
					    "INDEX index_tango_okuri ( tango(20), okuri ),"
					    "INDEX index_tango_yomi ( tango(20), yomi(20) ),"
					    "INDEX index_yomi_okuri ( yomi(20), okuri ),"
					    "INDEX index_kind ( kind )"
					    " )  ;" )))
		(_ (sumibi-dbi-write-query conn "INSERT INTO word VALUES (0, 'n', NULL, NULL, NULL, NULL, 1, 0);"))
		(_ (sumibi-dbi-write-query conn "INSERT INTO word VALUES (0, 'U', NULL, NULL, NULL, NULL, 1, 0);"))
		(_ (sumibi-dbi-write-query conn 
					   (string-append
					    "CREATE TABLE IF NOT EXISTS bigram ("
					    "id_m1   INT NOT NULL,"
					    "id_base INT NOT NULL,"
					    "freq_base INT,"
					    "freq_user INT,"
					    "INDEX index_base ( id_base ),"
					    "PRIMARY KEY (id_m1, id_base)"
					    " )  ;" )))
		(_ (sumibi-dbi-write-query conn 
					   (string-append
					    "CREATE TABLE IF NOT EXISTS skip_bigram ("
					    "id_m1   INT NOT NULL,"
					    "id_base INT NOT NULL,"
					    "freq_base INT,"
					    "freq_user INT,"
					    "INDEX index_base ( id_base ),"
					    "PRIMARY KEY (id_m1, id_base)"
					    " )  ;" )))
		(_ (sumibi-dbi-write-query conn 
					   (string-append
					    "CREATE TABLE IF NOT EXISTS okuri ("
					    "okuri CHAR(1),"
					    "kana  CHAR(255),"
					    "freq_base INT,"
					    "PRIMARY KEY ( okuri, kana )"
					    " )  ;" )))
		(_ (sumibi-dbi-write-query conn 
					   (string-append
					    "CREATE TABLE IF NOT EXISTS file ("
					    "filename VARCHAR(255) NOT NULL,"
					    "date     DATETIME     NOT NULL,"
					    "PRIMARY KEY (filename)"
					    " )  ;" ))))))
	((skk)
	 (sumibi-skkdict-load input-port conn))
	((load)
	 (sumibi-corpus-load input-port input-file conn))
	((show)
	 ;; word テーブルの件数表示
	 (display "### word:total ")
	 (display (caar (sumibi-dbi-read-query conn "SELECT count(*) FROM word;" "d")))
	 (newline)
	 
	 ;; word テーブルの全内容表示
	 (when #t
	       (for-each
		(lambda (x)
		  (display x) (newline))
		(sumibi-dbi-read-query conn 
				       "SELECT id,kind,yomi, yomiank,tango,okuri,freq_base FROM word ORDER BY freq_base DESC LIMIT 0,30;"
				       "sssssss")))
	    
	 ;; bigram テーブルの件数表示
	 (display "### bigram:total ")
	 (display (caar (sumibi-dbi-read-query conn "SELECT count(*) FROM bigram;" "d")))
	 (newline)

	 ;; bigram テーブルの全内容表示
	 (when #t
	       (for-each
		(lambda (x)
		  (display x) (newline))
		(sumibi-dbi-read-query conn
				       "SELECT b.freq_base, b.id_m1, w1.tango, w1.okuri, b.id_base, w2.tango, w2.okuri FROM bigram b CROSS JOIN word w1, word w2 WHERE b.id_m1 = w1.id and b.id_base = w2.id ORDER BY b.freq_base DESC LIMIT 0,30;"
				       "sssssss")))
	 
	 ;; skip_bigram テーブルの件数表示
	 (display "### skip_bigram:total ")
	 (display (caar (sumibi-dbi-read-query conn "SELECT count(*) FROM skip_bigram;" "d")))
	 (newline)

	 ;; skip_bigram テーブルの全内容表示
	 (when #t
	       (for-each
		(lambda (x)
		  (display x) (newline))
		(sumibi-dbi-read-query conn
				       "SELECT b.freq_base, b.id_m1, w1.tango, w1.okuri, b.id_base, w2.tango, w2.okuri FROM skip_bigram b CROSS JOIN word w1, word w2 WHERE b.id_m1 = w1.id and b.id_base = w2.id ORDER BY b.freq_base DESC LIMIT 0,30;"
				       "sssssss")))

	 ;; okuri テーブルの件数表示
	 (display "### okuri:total ")
	 (display (caar (sumibi-dbi-read-query conn "SELECT count(*) FROM okuri;" "d")))
	 (newline)
	 
	 ;; okuri テーブルの全内容表示
	 (for-each
	  (lambda (x)
	    (display x) (newline))
	  (sumibi-dbi-read-query conn 
				 "SELECT okuri,kana,freq_base FROM okuri ORDER BY freq_base DESC LIMIT 0,30;"
				 "sss"))
	 
	 ;; file テーブルの全内容表示
	 (for-each
	  (lambda (x)
	    (display x) (newline))
	  (sumibi-dbi-read-query conn 
				 "SELECT date,filename FROM file ORDER BY date DESC;"
				 "ss")
	  ))
	(else
	 (print "Error: unknown command")
	 (exit 1)
	 ))))

  (exit 0))
