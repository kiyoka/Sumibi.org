#!/usr/local/bin/gosh
;;
;; "Sumibi" is an Ank kana kanji conversion system.
;;
;;   Copyright (C) 2002,2003,2004,2005 Kiyoka Nishiyama
;;     $Date: 2006/08/10 13:38:49 $
;;
;; This file is part of Sumibi
;;
;; Sumibi is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2, or (at your option)
;; any later version.
;; 
;; Sumibi is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;; 
;; You should have received a copy of the GNU General Public License
;; along with Sumibi; see the file COPYING.
;;
;;
(use text.parse)
(use gauche.parseopt)
(use gauche.charconv)
(use gauche.regexp)
(use srfi-1)
(use srfi-11)
(use srfi-13)
(use dbi)
(use gauche.collection)
(use util.list)
(use util.combinations)
(use www.cgi)
(use text.html-lite)
(use text.tree)
(use file.util)
(use sumibi.define)
(use sumibi.history)
(use sumibi.dbiutil)
(use sumibi.romkan)




(define sumibi-inner-info '()) ;; Sumibiの演算過程の記録


;;
;;  'おこな' 'u' 等のSQL発行用リストを作成する。
;;
(define (sumibi-make-okurigana-pattern-list hiragana)
  (let ((okuri-pattern-list '()))
    (dotimes
     (i (- (string-length hiragana) 1 ))
     (let (
	   (kanji-part (substring hiragana 0 (+ i 1)))
	   (okuri-part (substring
			(romkan-kana->roman
			 (substring hiragana (+ i 1) (+ i 2)))
			0
			1))
	   (okuri-kana-part (substring hiragana (+ i 1) (string-length hiragana))))

       (when sumibi-debug
	     (begin
	       (display "kanji-part      = ") (display kanji-part) (newline)
	       (display "okuri-part      = ") (display okuri-part) (newline)
	       (display "okuri-kana-part = ") (display okuri-kana-part) (newline)))
       (set! okuri-pattern-list (cons
				 `(,kanji-part
				   ,okuri-part
				   ,okuri-kana-part)
				 okuri-pattern-list))))
    okuri-pattern-list))



;;
;; roman 文字列をかな文字列に変換する
;; もしかなに変換出来ない文字があれば、#f を返す
;;
(define (sumibi-roman->kana str)
  (let (
	(hiragana (romkan-roman->kana str)))

    (if (romkan-is-hiragana hiragana)
	hiragana
	#f)))

;;
;; 文節の読みから、候補となる単語を列挙する。
;;  引数:
;;   str    ... 文節文字列
;;   method ... メソッドを示すシンボル ( h k j など )
;;   spaces ... スペースの数
;;
;;  戻り値: 
;;   (
;;    (
;;      method   . ユーザー指定メソッド
;;      orig     . 検索文字列
;;      hiragana . ひらがなに変換した文字列
;;      katakana . カタカナに変換した文字列
;;      alpha    . アルファベットに変換した文字列
;;    )
;;    (
;;      単語ID
;;      (tango    . 単語文字列)
;;      (yomi     . 読み文字列)
;;      (okuri    . 送り文字列:一文字)
;;      (freq     . 頻度:回数)
;;   )
;;
(define (sumibi-lookup-candidate-bunsetu str method spaces conn)
  (let* (
	 (hiragana (sumibi-roman->kana str))
	 (katakana (if hiragana
		       (romkan-hiragana->katakana hiragana)
		       #f))
	 (okuri-pattern-list (if hiragana
				 (sumibi-make-okurigana-pattern-list hiragana)
				 '()))
	 (std-query      (format "SELECT id, tango, yomi, okuri, freq_base FROM word WHERE (yomi  = ~s AND okuri = '') "  str))
	 (yomi-query     
	  (if hiragana
	      (format "SELECT id, tango, yomi, okuri, freq_base FROM word WHERE (yomi  = ~s AND okuri = '') "  hiragana)
	      #f))
	 (hiragana-query 
	  (if hiragana
	      (format "SELECT id, tango, yomi, okuri, freq_base FROM word WHERE (tango = ~s AND okuri = '') "  hiragana)
	      #f))
 	 (katakana-query
 	  (if katakana
 	      (format "SELECT id, tango, yomi, okuri, freq_base FROM word WHERE (tango = ~s AND okuri = '') "  katakana)
 	      #f))
	 (alphabet-query
	  (format "SELECT id, tango, yomi, okuri, freq_base FROM word WHERE (tango = ~s AND okuri = '') "  str))

	 ;; かなに直した読みでマッチングする。
	 ;; または 元の英語綴のままで直接マッチングする
	 (okuri-query
	  (if (> 1 (length okuri-pattern-list))
	      #f
	      (string-append
	       "SELECT id, tango, yomi, word.okuri, word.freq_base FROM word RIGHT JOIN okuri USING ( okuri ) WHERE "
	       (string-join
		(map 
		 (lambda (x)
		   (format " (yomi = ~s AND okuri.okuri = ~s AND kana = ~s) " (car x) (cadr x) (caddr x)))
		 okuri-pattern-list)
		" OR "))))


	 (_
	  (when sumibi-debug
		(push! sumibi-inner-info
		       (list
			2 ;; stage
			(list
			 (html:h2 str)
			 (html:table
			  :border 1
			  (html:tr (html:th "オリジナル") (html:th "ひらがな") (html:th "カタカナ")
				   (html:th "アルファベット") (html:th "スペース") (html:th "メソッド"))
			  (html:tr 
			   (html:td  str)
			   (html:td  hiragana)
			   (html:td  katakana)
			   (html:td  str)
			   (html:td  spaces
			   (html:td  method)))))))))

	 (query-string 
	  (cond
	   ;; ひらがな固定
	   ((and (eq? method 'h) hiragana-query)

	    (when sumibi-debug
		  (push! sumibi-inner-info
			 (list
			  2 ;; stage
			  (list
			   (html:h3 "hiragana-query")
			   (html:ul
			    (html:li hiragana-query))))))
	    hiragana-query
	    )
	   ;; カタカナ固定
	   ((and (eq? method 'k) katakana-query)
	    (when sumibi-debug
		  (push! sumibi-inner-info
			 (list
			  2 ;; stage
			  (list
			   (html:h3 "katakana-query")
			   (html:ul
			    (html:li katakana-query))))))
	    katakana-query
	    )
	   ;; アルファベット固定
	   ((eq? method 'l)
	    (when sumibi-debug
		  (push! sumibi-inner-info
			 (list
			  2 ;; stage
			  (list
			   (html:h3 "alphabet-query")
			   (html:ul
			    (html:li alphabet-query))))))
	    alphabet-query
	    )
	   (else
	    (let1 _q
		  (string-append
		   "       ( " std-query " ) "
		   (if yomi-query
		       (string-append " UNION ( " yomi-query " ) ")
		       "")
		   (if katakana-query
		       (string-append " UNION ( " katakana-query " ) ")
		       "")
		   (if okuri-query
		       (string-append " UNION ( " okuri-query " ) ")
		       ""))
		   
		  (when sumibi-debug
			(push! sumibi-inner-info
			       (list
				2 ;; stage
				(list
				 (html:h3 "method-free-query")
				 (html:ul
				  (html:li _q))))))
		  _q)
	    )))

	 (result
	  (map
	   (lambda (x)
	     `(
	       ,(list-ref x 0)
	       (tango    . ,(list-ref x 1))
	       (yomi     . ,(list-ref x 2))
	       (okuri    . ,(list-ref x 3))
	       (freq     . ,(list-ref x 4))))
	   (sumibi-dbi-read-query conn
				  query-string
				  "dsssd"
				  )))
	   
	 ;; 結果をソートする
	 (result
	  (sort result
		(lambda (x y)
		  (>
		   (assq-ref x 'freq)
		   (assq-ref y 'freq))))))
	  

    (when sumibi-debug
      (push! sumibi-inner-info
             (list
              2 ;; stage
              (list
               (html:h3 "候補リスト")
               (html:table
                :border 1
                (html:tr (html:th "id") (html:th "単語") (html:th "読み") (html:th "送り")
                         (html:th "『単語』出現回数"))
                (map
                 (lambda (x)
                   (let1 _assoc (cdr x)
                         (html:tr
                          (html:td
                           (car x))
                          (html:td   (assq-ref _assoc 'tango ))
                          (html:td   (assq-ref _assoc 'yomi  ))
                          (html:td   (assq-ref _assoc 'okuri ))
                          (html:td   (assq-ref _assoc 'freq  ))
                          )))
                 result))))))

    `(
      ,(append
	`((method   . ,method))
	`((orig     . ,str))
	`((hiragana . ,hiragana))
	`((katakana . ,katakana))
	`((alpha    . ,str))
	`((spaces   . ,spaces)))
      ,result)))


;;
;; 3つのNgramの結果から評価値を求める
;;
(define (sumibi-compute-pacent result-bigram-pre2 result-bigram-pre1 result-word result-bigram-post1 result-bigram-post2)
  (let* (
	 (result
	 (map
	  (lambda (x)
	    (let* (
		   (id   (car x))
		   (data (cdr x))
		   (relative0 (assq-ref data 'relative0))
		   (okuri     (assq-ref data 'okuri    ))
		   (pre2  (assv id result-bigram-pre2))
		   (pre1  (assv id result-bigram-pre1))
		   (post1 (assv id result-bigram-post1))
		   (post2 (assv id result-bigram-post2))
		   (total
		    (+
		     (*
		      (list-ref sumibi-evaluate-balance 0)
		      (if pre2
			  (assq-ref (cdr pre2) 'relative-2)
			  0))
		     (*
		      (list-ref sumibi-evaluate-balance 1)
		      (if pre1
			  (assq-ref (cdr pre1) 'relative-1)
			  0))
		     (*
		      (list-ref sumibi-evaluate-balance 2)
		      relative0)
		     (*
		      (list-ref sumibi-evaluate-balance 3)
		      (if post1
			  (assq-ref (cdr post1) 'relative1)
			  0))
		     (*
		      (list-ref sumibi-evaluate-balance 4)
		      (if post2
			  (assq-ref (cdr post2) 'relative2)
			  0))))
		   ;; 送りがながある単語の評価を落とす
		   (total 
		    (if (< 0 (string-length okuri))
			(* total sumibi-evaluate-okurigana)
			total)))

	      (cons
	       id
	       (append data
		       (if pre1
			   (cdr pre1)
			   '((relative-1 . 0)))
		       (if pre2
			   (cdr pre2)
			   '((relative-2 . 0)))
		       (if post1
			   (cdr post1)
			   '((relative1 . 0)))
		       (if post2
			   (cdr post2)
			   '((relative2 . 0)))
		       `((total . ,total))))))

	  result-word))

	 ;; 結果を、評価値の高い順にソートする
	 (result
	  (sort result
		(lambda (x y)
		  (>
		   (assq-ref x 'total)
		   (assq-ref y 'total))))))
    
    result))
	

;;
;; 前後に2連鎖した単語候補から、全組合せの共起確率を求める
;;
(define (sumibi-compute-candidate-pacent-sub rensa-bunsetu conn)

  ;; 総あたりのwhere句を生成する
  (define (make-souatari-where-exp id-list1 id-list2)
    (when sumibi-debug
	  (begin
	    (push! sumibi-inner-info
		   (let1 num-list (append (iota 
					   sumibi-candidate-top-limit)
					  (make-list 10 #f)
					  (make-list 10 #f)
					  (make-list 10 #f)
					  (make-list 10 #f)
					  (make-list 10 #f))
			 (list
			  3 ;; stage
			  (list
			   (html:h3
			    "総当り IDs (上段と下段の総当りの共起頻度を全て評価)")
			   (html:table
			    :border 1
			    (html:tr 
			     (map
			      (lambda (x)
				(html:td
				 (if (car x)
				     (format "~a" (cadr x))
				     (format "(~a)" (cadr x)))))
			      (zip
			       num-list
			       id-list1))
			     (html:tr 
			      (map
			       (lambda (x)
				 (html:td
				  (if (car x)
				      (format "~a" (cadr x))
				      (format "(~a)" (cadr x)))))
			       (zip
				num-list
				id-list2)))))))))))

    (if (or 
	 (null-list? id-list1)
	 (null-list? id-list2))
	#f
	(string-join
	 (map
	  (lambda (x)
	    (string-join `(" (id_base = " ,(write-to-string (car x)) "  AND  id_m1 = " ,(write-to-string (cadr x)) ") " ) " "))
	  (cartesian-product-right
	   (list
	    (take* id-list1 sumibi-candidate-top-limit)
	    (take* id-list2 sumibi-candidate-top-limit))))
	 " OR ")))


  ;; 共起頻度を集計し％で結果を求める
  (define (exec-bigram-search which id-list table-name where-exp key debug-message conn)
    (if (not where-exp)
	'()
	(let* (
               (id-name
                (case which
                  ('pre
                   "id_base")
                  (else
                   "id_m1")))
               (h-table-name (string-append "h_" table-name))
	       (_
                (append
                 (sumibi-dbi-read-query conn
                                        (string-append "   SELECT SUM(freq_base) FROM " table-name " WHERE " where-exp)
                                        "d")
                 (sumibi-dbi-read-query conn
                                        (string-append "   SELECT SUM(freq_base) FROM " h-table-name " WHERE " where-exp)
                                        "d")))
	       (sum-str-list
                (map
                 (lambda (x)
                   (number->string (car x)))
                 _))
	       (bigram-query-string1
		(string-append
		 "    SELECT " id-name ", SUM( " table-name ".freq_base ), " (car sum-str-list) ", SUM( " table-name ".freq_base )/ " (car sum-str-list) " ,word.tango, okuri "
		 "      FROM " table-name " JOIN word ON id_base = word.id "
		 "      WHERE " where-exp
		 "    GROUP BY " id-name))
	       (bigram-query-string2
		(string-append
                 "    SELECT " id-name ", SUM( " h-table-name ".freq_base ), " (cadr sum-str-list) ", SUM( " h-table-name ".freq_base )/ " (cadr sum-str-list) " ,word.tango, okuri "
		 "      FROM " h-table-name " JOIN word ON id_base = word.id "
		 "      WHERE " where-exp
		 "    GROUP BY " id-name))
	       (result-bigram
		(map
		 (lambda (x)
		   `(
		     ,(list-ref x 0)
		     (freq1     . ,(list-ref x 1))
		     (sum1      . ,(list-ref x 2))
		     (,(string->symbol key) . ,(list-ref x 3))
		     (tango     . ,(list-ref x 4))
		     (okuri     . ,(list-ref x 5))))
                 (append
                  (sumibi-dbi-read-query conn 
                                         bigram-query-string1
                                         "ddddss")
                  (sumibi-dbi-read-query conn 
                                         bigram-query-string2
                                         "ddddss")))))

	  (when sumibi-debug
		(push! sumibi-inner-info
		       (list
			3 ;; stage
			(list
			 (html:p (format "~a = ~s" debug-message bigram-query-string1))
			 (html:p (format "~a = ~s" debug-message bigram-query-string2))))))
	  result-bigram)))


  (let* (
	 ;; 二つ前の単語の候補ID
	 (id-list-pre2
	  (filter-map
	   (lambda (x)
	     (if (eqv? 0 (car x))
		 #f
		 (car x)))
	   (cadr (list-ref rensa-bunsetu 0))))

	 ;; 一つ前の単語の候補ID
	 (id-list-pre1
	  (filter-map
	   (lambda (x)
	     (if (eqv? 0 (car x))
		 #f
		 (car x)))
	   (cadr (list-ref rensa-bunsetu 1))))

	 ;; 注目位置の単語候補
	 (id-list
	  (filter-map
	   (lambda (x)
	     (if (eqv? 0 (car x))
		 #f
		 (car x)))
	   (cadr (list-ref rensa-bunsetu 2))))

	 ;; 一つ後ろの単語の候補ID
	 (id-list-post1
	  (filter-map
	   (lambda (x)
	     (if (eqv? 0 (car x))
		 #f
		 (car x)))
	   (cadr (list-ref rensa-bunsetu 3))))

	 ;; 二つ後ろの単語の候補ID
	 (id-list-post2
	  (filter-map
	   (lambda (x)
	     (if (eqv? 0 (car x))
		 #f
		 (car x)))
	   (cadr (list-ref rensa-bunsetu 4))))

	 ;; 単語の候補ID全てを単純検索するWHERE句
	 (where-exp
	  (if (null-list? id-list)
	      " id = 0 "
	      (string-join
	       (map
		(lambda (x)
		  (string-join `(" id = " ,(write-to-string x) " ") " "))
		id-list)
	       " OR ")))

	 ;; センター(中央)のデータ
	 (center (list-ref rensa-bunsetu 2))

	 (_
	  (when sumibi-debug
		(begin
		  (push! sumibi-inner-info
			 (list
			  3 ;; stage
			  (list
			   (html:h3
			    (format "~a (~a)"
				    (assq-ref (car center) 'orig)
				    (assq-ref (car center) 'hiragana)))
			   (html:ul
			    (html:li
			     (string-join
			      (map
			       (lambda (x) 
				 (format "~a"  x))
			       id-list)
			      ", ")))))))))
	 

	 (where-exp-pre1
	  (make-souatari-where-exp
	   id-list id-list-pre1))
	 (where-exp-pre2
	  (make-souatari-where-exp
	   id-list id-list-pre2))
	 (where-exp-post1
	  (make-souatari-where-exp
	   id-list-post1 id-list))
	 (where-exp-post2
	  (make-souatari-where-exp
	   id-list-post2 id-list))

	 ;; 頻度総計を求める
	 (sum-query-string
	  (string-append "SELECT SUM(freq_base) FROM word WHERE " where-exp))
	 (_
	  (sumibi-dbi-read-query conn 
				 sum-query-string
				 "d"))
	 (sum-str (number->string (caar _)))

	 (query-string
	  (string-append
	   "    SELECT id, tango, yomi, okuri, word.freq_base, " sum-str " ,word.freq_base / " sum-str " AS relative0 "
	   "      FROM word "
	   "      WHERE " where-exp 
	   ))

	 (result-word
	  (map
	   (lambda (x)
             (let* ((id (list-ref x 0))
                    (user_freq (sumibi-word-times-in-history id conn))
                    (rel0_pair (if (< 0 user_freq)
                                   (cons 'relative0
                                         (* user_freq
                                            (list-ref x 6)))
                                   (cons 'relative0
                                         (list-ref x 6)))))
               `(
                 ,(list-ref x 0)
                 (tango     . ,(list-ref x 1))
                 (yomi      . ,(list-ref x 2))
                 (okuri     . ,(list-ref x 3))
                 (freq0     . ,(list-ref x 4))
                 (sum0      . ,(list-ref x 5))
                 ,rel0_pair)))
	   (sumibi-dbi-read-query conn 
				  query-string
				  "dsssddd")))


	 ;; 頻度総計を求める(pre2)
	 (result-bigram-pre2
	  (exec-bigram-search 'pre id-list-pre2 "skip_bigram" where-exp-pre2 "relative-2" "pre2" conn))
	 
	 ;; 頻度総計を求める(pre1)
	 (result-bigram-pre1
	  (exec-bigram-search 'pre id-list-pre1 "bigram" where-exp-pre1 "relative-1" "pre1" conn))

	 ;; 頻度総計を求める(post1)
	 (result-bigram-post1
	  (exec-bigram-search 'post id-list-post1 "bigram" where-exp-post1 "relative1" "post1" conn))

	 ;; 頻度総計を求める(post2)
	 (result-bigram-post2
	  (exec-bigram-search 'post id-list-post2 "skip_bigram" where-exp-post2 "relative2" "post2" conn)))



    (sumibi-compute-pacent
     result-bigram-pre2
     result-bigram-pre1
     result-word
     result-bigram-post1
     result-bigram-post2)))



;;
;; 前後に2連鎖した単語候補から、全組合せの共起確率を求める
;;
(define (sumibi-compute-candidate-pacent rensa-bunsetu conn)
  (let* (
	;; 注目している単語の候補ID
	 (center (list-ref rensa-bunsetu 2))

	 (id-list
	  (map
	   (lambda (x)
	     (car x))
	   (cadr center))))

    (if (null? id-list)
	center
	
	;; 候補が存在するものについて実際に計算する
	`(
	  ,(car center)
	  ,(sumibi-compute-candidate-pacent-sub rensa-bunsetu conn)))))


;;
;; 変換候補リストを作成する
;;  連鎖する単語の評価値を求め、一番評価値の高い候補に並べる
;;
(define (sumibi-make-henkan-kouho kouho-list conn)
  (let* (
	 ;; ダミーの文節データ
	 (dummy-bunsetu
	  '(
	    (
	     (orig     . #f)
	     (hiragana . #f))
	    (
	     (0 ;; id
	      (tango . "")
	      (yomi  . "")
	      (okuri . "")
	      (freq  . 0)
	      ))
	    ))

	 ;; スライドデータ1:先頭の単語の前にゼロ個ダミーを結合したもの
	 (kouho-list-pre0
	  (append
	   kouho-list
	   (list dummy-bunsetu)
	   (list dummy-bunsetu)
	   (list dummy-bunsetu)
	   (list dummy-bunsetu)))

	 ;; スライドデータ1:先頭の単語の前に１つダミーを結合したもの
	 (kouho-list-pre1
	  (append
	   (list dummy-bunsetu)
	   kouho-list
	   (list dummy-bunsetu)
	   (list dummy-bunsetu)
	   (list dummy-bunsetu)))

	 ;; スライドデータ2:先頭の単語の前に２つダミーを結合したもの
	 (kouho-list-pre2
	  (append
	   (list dummy-bunsetu)
	   (list dummy-bunsetu)
	   kouho-list
	   (list dummy-bunsetu)
	   (list dummy-bunsetu)))

	 ;; スライドデータ2:先頭の単語の前に３つダミーを結合したもの
	 (kouho-list-pre3
	  (append
	   (list dummy-bunsetu)
	   (list dummy-bunsetu)
	   (list dummy-bunsetu)
	   kouho-list
	   (list dummy-bunsetu)))

	 ;; スライドデータ2:先頭の単語の前に４つダミーを結合したもの
	 (kouho-list-pre4
	  (append
	   (list dummy-bunsetu)
	   (list dummy-bunsetu)
	   (list dummy-bunsetu)
	   (list dummy-bunsetu)
	   kouho-list))

	 ;; bigram, skip-bigram を使って可能性のある共起頻度を全パターン求める
	 (point-result
	  (map
	   (lambda (rensa-bunsetu)
	     (sumibi-compute-candidate-pacent rensa-bunsetu conn))
	   (zip
	    kouho-list-pre4
	    kouho-list-pre3
	    kouho-list-pre2
	    kouho-list-pre1
	    kouho-list-pre0)))

	 ;; 前後 ２個づつの要素を削除する
	 (point-result
	  (take*
	   (drop* point-result 2)
	   (- (length point-result) 4))))

    (when sumibi-debug
	  (begin
	    (display "point-result:")
	    (write point-result)
	    (newline)))


    point-result))
	     

;;
;; 完成した文節を返す。
;;
(define (sumibi-output-henkan-kouho word-no tango-info kouho-info)

  (define (is-kigou str)
    (not
     (rxmatch #/^[a-zA-Z0-9]+$/ str)))

  ;; 一番評価値の高い順に完成した文節を返す
  (map
   (lambda (x)
     (let (
           (id       (car x))
	   (hiragana (assq-ref tango-info 'hiragana  ))
	   (orig     (assq-ref tango-info 'orig      ))
	   (tango    (assq-ref x          'tango     ))
	   (okuri    (assq-ref x          'okuri     ))
	   (yomi     (assq-ref x          'yomi      )))
    
       `(j
	 ,(if (or hiragana (is-kigou orig))
	      (if (< 0 (string-length okuri))
		  (let ((okuri-string
			 (substring hiragana
				    (string-length yomi)
				    (+ (string-length yomi)
				       (- (string-length hiragana) (string-length yomi))))))
		    (string-append
		     tango
		     okuri-string))
		  tango)
	      orig)
         ,id
	 ,word-no    ;; 文節番号
	 )))

   
   kouho-info))


;;
;; 変換する。
;;  一番評価値の高い順に完成した文節を返す。
;;
(define (sumibi-output-henkan-kouho-list henkan-kouho-list)

  (let (
	(word-no 0))
    (map
     (lambda (bunsetu)
       (let* (
	      ;; 単語情報
	      (tango-info (car  bunsetu))
	      (kouho-info (cadr bunsetu))
	      (spaces   (assq-ref tango-info 'spaces)))
       
	 (let* (
                (id       (caar kouho-info))
		(method   (assq-ref tango-info 'method   ))
		(orig     (assq-ref tango-info 'orig     ))
		(hiragana (assq-ref tango-info 'hiragana ))
		(katakana (assq-ref tango-info 'katakana ))
		(alpha    (assq-ref tango-info 'alpha    ))
	 
		;; 候補値の高い順に完成した文節を返す。
		(j-kouho  (sumibi-output-henkan-kouho word-no tango-info kouho-info))
		(_index   0)

		;; 
		(j-etc-kouho
		 (if (eq? method 'l)
		     ;; ---アルファベットへの絞りこみの場合
		     (list
		      `(l ,orig     ,id ,word-no))
		     ;; ---それ以外の場合
		     (append
		      ;; 候補値の高い順に完成した文節を返す。
		      j-kouho

		      ;; 必須項目 ひらがな、カタカナ、アルファベットをリストの最後に追加する。
		      (filter-map
		       (lambda (x)
			 x)
		       (case method
			 ('h
			  (list
			   (if hiragana        `(h ,hiragana ,id ,word-no) #f)
			   (if katakana        `(k ,katakana ,id ,word-no) #f)
			   (if alpha           `(l ,alpha    ,id ,word-no) #f)))
			 ('k
			  (list
			   (if katakana        `(k ,katakana ,id ,word-no) #f)
			   (if hiragana        `(h ,hiragana ,id ,word-no) #f)
			   (if alpha           `(l ,alpha    ,id ,word-no) #f)))
			 (else
			  (list
			   (if hiragana        `(h ,hiragana ,id ,word-no) #f)
			   (if katakana        `(k ,katakana ,id ,word-no) #f)
			   (if alpha           `(l ,alpha    ,id ,word-no) #f)))))))))

	   (begin0
	    ;; 候補の最後に、単語の間のスペース数を付ける
	    (map
	     (lambda (x)
	       (begin0
		(append x (list _index spaces))
		(set! _index (+ 1 _index))))
	     j-etc-kouho)

	    ;; word-no のインクリメント
	    (set! word-no (+ 1 word-no))))))

     henkan-kouho-list)))

	
;;
;; 文章文字列を変換する。
;;
(define (sumibi-convert-sentence str conn)

  ;; ユーザー入力を表示(デバッグ用)
  (define (output-user-input-list bunsetu-and-spaces)
    (list
     1 ;; stage
     (list
      (html:table
       :border 1
       (html:tr (html:th "文節") (html:th "文節の頭のスペース文字数")) 
       (map
	(lambda (x)
	  (html:tr 
	   (html:td 
	    (car x))
	   (html:td 
	    (cadr x))))
	bunsetu-and-spaces)))))


  ;; 1文節文の出力
  (define (output-bunsetu bunsetu)
    (let (
	  (first-assoc (car bunsetu)))

      (list
       (html:table
	:border 1
	(html:h2 (format #f "~s" (assq-ref first-assoc 'orig)))
	(html:tr (html:th "オリジナル") (html:th "ひらがな") (html:th "カタカナ") (html:th "アルファベット") (html:th "スペース") (html:th "メソッド"))
	(html:tr 
	 (html:td 
	  (assq-ref first-assoc 'orig      ))
	 (html:td 
	  (assq-ref first-assoc 'hiragana  ))
	 (html:td
	  (assq-ref first-assoc 'katakana  ))
	 (html:td
	  (assq-ref first-assoc 'alpha     ))
	 (html:td 
	  (assq-ref first-assoc 'spaces    ))
	 (html:td 
	  (assq-ref first-assoc 'method    ))))
       (html:h3 "候補リスト")
       (html:table
	:border 1
	(html:tr (html:th "id") (html:th "単語") (html:th "読み") (html:th "送り")
		 (html:th "『単語』出現回数") (html:th "『読み』出現回数")
		 (html:th "[-2,0]出現割合") (html:th "[-1,0]出現割合")  (html:th "[0]出現割合") (html:th "[0,1]出現割合") (html:th "[0,2]出現割合"))
	(map
	 (lambda (x)
	   (let1 _assoc (cdr x)
		 (html:tr
		  (html:td   (car x))
		  (html:td   (assq-ref _assoc 'tango      ))
		  (html:td   (assq-ref _assoc 'yomi       ))
		  (html:td   (assq-ref _assoc 'okuri      ))
		  (html:td   (assq-ref _assoc 'freq0      ))
		  (html:td   (assq-ref _assoc 'sum0       ))
		  (html:td   (assq-ref _assoc 'relative-2 ))
		  (html:td   (assq-ref _assoc 'relative-1 ))
		  (html:td   (assq-ref _assoc 'relative0  ))
		  (html:td   (assq-ref _assoc 'relative1  ))
		  (html:td   (assq-ref _assoc 'relative2  ))
		  )))
	 (cadr bunsetu))))))

  ;; 完成した文章をHTMLの表として出力する
  (define (output-complete-sentence henkan-kouho-list)
    (html:h2 "完成した文章")
    (html:table
     :border 1
     (html:tr
      (html:th "1")
      (html:th "2")
      (html:th "3")
      (html:th "4")
      (html:th "5")
      (html:th "6")
      (html:th "7")
      (html:th "8")
      (html:th "9")
      (html:th "10")
      (html:th "11")
      (html:th "12")
      (html:th "13")
      (html:th "14")
      (html:th "15")
      (html:th "16"))
     (map 
      (lambda (bunsetu-kouho)
	(html:tr
	 (map
	  (lambda (bunsetu)
	    (let1 _assoc (cdr bunsetu)
		  (html:td  
		   (string-append
		    (assq-ref _assoc 'tango)
		    (assq-ref _assoc 'okuri)))))
	  (cadr bunsetu-kouho))))
      henkan-kouho-list)))


  ;; 最終的な変換結果を標示する
  (define (output-henkan-kouho-list henkan-kouho-list)
    (list
     4 ;; stage
     (list
      (output-complete-sentence
       henkan-kouho-list)
      (map
       (lambda (x)
	 (output-bunsetu x))
       henkan-kouho-list))))
	 
  (let* (
	 ;; 文節リスト ( 一つ一つの文節は、全てローマ字のまま )
	 (bunsetu-list (string-split str #/\s+/))

	 ;; 文節の間のスペースの数を数える
	 (_ (string-split str #/[^\s]+/))
	 (spaces-list
	  (reverse
	   (cdr
	    (reverse
	     (map
	      (lambda (x)
		(string-length x))
	      _)))))

	 ;; 文節をリストにしたものと、文節の間のスペースの数をzipしたリスト
	 (zipped-list
	  (zip
	   bunsetu-list
	   spaces-list))

	 (_
	  (push! sumibi-inner-info 
		 (output-user-input-list zipped-list)))
    
	 ;; 候補を検索する
	 (lookup-list
	  (map
	   (lambda (x)
	     (let* (
		    (tango (car x))
		    ;; メソッド指定のピックアップ
		    (match (rxmatch #/\.([elkh])$/ (car x)))
		    (_ (if match
			   (begin
			     (set! tango (rxmatch-before match))
			     (string->symbol (match 1)))
			   #f))
		    (method (if (assoc _ sumibi-method-list)
				(cdr (assoc _ sumibi-method-list))
				#f)))

	       (sumibi-lookup-candidate-bunsetu tango method (cadr x) conn)))
	   zipped-list))

	 ;; 評価値順の候補リストを求める
	 (henkan-kouho-list (sumibi-make-henkan-kouho lookup-list conn))

	 ;; 評価結果を表示する
	 (_
	  (push! sumibi-inner-info
		 (output-henkan-kouho-list henkan-kouho-list)))

	 ;; 変換候補リストを完成させて返す。
	 (complete-henkan-kouho-list (sumibi-output-henkan-kouho-list henkan-kouho-list)))

    ;; 結果を返す
    complete-henkan-kouho-list))


(define (sumibi-save-inner-info inner-info)
  (let (
	(dirname "./out")
	(title-alist
	 '((1 . "stage1 ユーザー入力")
	   (2 . "stage2 単語候補のリストアップ")
	   (3 . "stage3 共起頻度の計算")
	   (4 . "stage4 最終結果"))))

    (make-directory* dirname)

    (for-each
     (lambda (_alist)
       (let1 this-stage
	     (filter-map
	      (lambda (x)
		(if (= (car x) (car _alist))
		    (cadr x)
		    #f))
	      inner-info)
	     
	     (call-with-output-file
		 (format "~a/~a.html" dirname (car _alist))
	       (lambda (port)
		 (display
		  (tree->string
		   (html:html
		    (html:head
		     (html:link :rel "stylesheet" :href "sumibi.css" :type "text/css")
		     (html:title (cdr _alist)))
		    (html:body
		     (list
		      (html:h1 (cdr _alist))
		      (reverse this-stage)))))
		  port)))))
     title-alist)

    (call-with-output-file
	(format "~a/index.html" dirname)
      (lambda (port)
	(display
	 (tree->string
	  (html:html
	   (html:head
	    (html:link :rel "stylesheet" :href "sumibi.css" :type "text/css"))
	   (html:body
	    (html:h1 "Sumibi計算過程目次")
	    (html:ul
	     (map
	      (lambda (x)
		(html:li  (html:a :href (format "~a.html" (car x)) (cdr x))))
	      title-alist)))))
	 port)))))



;; 一行コマンドの対話に入る前の初期化
(define (sumibi-do-initialize conn)
  (sumibi-init-history conn))


;; 一行コマンドを実行する
(define (sumibi-do-command str conn)
  
  ;;
  ;; roman 文字列をかな文字列に変換する
  ;;
  (define (sumibi-local-roman->kana str)
    (romkan-roman->kana str))

  (let* (
	 ;; 句読点の分割処理
	 (_  (regexp-replace-all #/([^ ,.])[,] / str "\\1 , "))
	 (_  (regexp-replace-all #/([^ ,.])[,]$/   _ "\\1 ,"))
	 (_  (regexp-replace-all #/([^ ,.])[.] /   _ "\\1 . "))
	 (_  (regexp-replace-all #/([^ ,.])[.]$/   _ "\\1 ."))
	 (command-and-arg (string-split _ #/\t/))
	 (command         (car  command-and-arg))
	 (args-string	  (if (< 1 (length command-and-arg))
			      (string-trim-both (cadr command-and-arg))
			      "")))
    (case (string->symbol command)
      ('version
       ;; バージョンの表示
       (list
	"ok\n"
	(string-append sumibi-version "\n")))
      ('addhistory
       (let1 _
             ;; ユーザーの履歴を追加する
             (sumibi-add-history args-string conn)

             ;; ユーザー履歴を表示(デバッグ用)
             (when sumibi-debug
               (begin
                 (push! sumibi-inner-info
                        (list
                         1 ;; stage
                         (list
                          (html:h2 "履歴")
                          (html:h3 "オリジナル:")
                          (html:p args-string)
                          (sumibi-debug-history conn)
                          (html:hr))))))
             (when sumibi-debug
               (sumibi-save-inner-info sumibi-inner-info))

             (list
              "ok\n")))
      ('resethistory
       ;; ユーザーの履歴をリセットして全てクリアする
       )
      ('convertsexp
       ;; 計算過程情報をクリア
       (let (
	     (result
	      (sumibi-convert-sentence args-string
                                       conn)))
	 (when sumibi-debug
           (sumibi-save-inner-info sumibi-inner-info))
	 (list
	  "ok\n"
	  (string-append (write-to-string result) "\n"))))

      ('convert
       (let (
	     (result
	      (sumibi-convert-sentence args-string
                                       conn)))
	 (when sumibi-debug
           (sumibi-save-inner-info sumibi-inner-info))
	 (list
	  "ok\n"
	  (map
	   (lambda (word)
	     (map
	      (lambda (kouho)
		(format "~a ~a ~a ~a ~a\n"
			(first   kouho)
			(second  kouho)
			(third   kouho)
			(fourth  kouho)
			(fifth   kouho)
			))
	      word))
	   result))))
	 
      ('converthira
       (list
	"ok\n"
	(string-append (sumibi-local-roman->kana args-string) "\n")))
	  
      (else
       ;; 未定義のコマンドが指定された場合
       #f))))


;; Main -------------------------------------------------------
(define (main args)

  (define docstrings
    `(
      ,(string-append "sumibi " sumibi-version)
      ""
      " Usage:"
      "	    sumibi [switches] [dictionary-file]"
      ""
      " Switches:"
      "     -h ... Display this help message."
      "     -d ... Output debug information to ./out ."
      ))

  (define (display-help)
    (for-each
     (lambda (docstring)
       (print docstring))
     docstrings)
    (exit 4))

;;  (write (generate-roman->kana-table))

  (let* (
	 (conn
	  (sumibi-dbi-connect
	   sumibi-sumibidb-host
	   sumibi-sumibidb-name
	   sumibi-sumibidb-user
	   sumibi-sumibidb-password))

	 ;; 第一引数を捨てる
	 (_ (cdr args))
	 
	 ;; optionのチェック
	 (_ (parse-options
	     _
	     (
	      ("h" () (display-help))
	      ("d" () (set! sumibi-debug #t))))))


    ;; 対話に入る前の初期化
    (sumibi-do-initialize conn)
    ;; 標準入出力による対話式プロトコル
    (port-for-each
     (lambda (x)
       (let ((result (sumibi-do-command x conn)))
	 (when (not result)
	       (exit 0))
	 (write-tree result)
	 (newline)
	 (flush (current-output-port))))
     read-line))

  (exit 0))
